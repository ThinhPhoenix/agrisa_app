name: Release 🕊️

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    name: Build iOS & Android 📦
    runs-on: macos-latest
    strategy:
      matrix:
        platform: [android, ios]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Load environment secrets
        env:
          SECRETS_CONTEXT: ${{ toJSON(secrets) }}
        run: |
          echo "$SECRETS_CONTEXT" | jq -r 'keys[]' | while read -r key; do
            if [ "$key" != "GITHUB_TOKEN" ]; then
              secret_value=$(echo "$SECRETS_CONTEXT" | jq -r ".[\"$key\"]")
              if [ "$secret_value" != "null" ] && [ -n "$secret_value" ]; then
                echo "$key=$secret_value" >> $GITHUB_ENV
              fi
            fi
          done

      - name: Detect framework
        id: detect
        run: |
          if [ -f "pubspec.yaml" ]; then
            echo "framework=flutter" >> $GITHUB_OUTPUT
          elif grep -q '"expo"' package.json 2>/dev/null; then
            echo "framework=expo" >> $GITHUB_OUTPUT
          elif grep -q '"react-native"' package.json 2>/dev/null; then
            echo "framework=react-native" >> $GITHUB_OUTPUT
          elif [ -f "capacitor.config.ts" ] || [ -f "capacitor.config.json" ]; then
            echo "framework=ionic" >> $GITHUB_OUTPUT
          elif [ -d "android" ] && [ -d "ios" ]; then
            echo "framework=native" >> $GITHUB_OUTPUT
          else
            echo "framework=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Setup base tools
        run: |
          brew install wget jq

      - name: Setup Java & Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v3

      - name: Setup Node.js
        if: steps.detect.outputs.framework != 'flutter'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Flutter
        if: steps.detect.outputs.framework == 'flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.3"

      - name: Install dependencies
        run: |
          FRAMEWORK=${{ steps.detect.outputs.framework }}
          echo "Detected framework: $FRAMEWORK"

          if [ "$FRAMEWORK" = "flutter" ]; then
            flutter pub get
          elif [ "$FRAMEWORK" = "expo" ]; then
            npm install -g expo-cli
            npm ci
          elif [ "$FRAMEWORK" = "react-native" ]; then
            npm ci
          elif [ "$FRAMEWORK" = "ionic" ]; then
            npm install -g @ionic/cli
            npm ci
          elif [ "$FRAMEWORK" = "native" ]; then
            echo "Native project detected. Ensure Gradle/Xcode projects are valid."
          else
            echo "Unknown framework, skipping install"
          fi

      - name: Build Android
        if: matrix.platform == 'android'
        run: |
          FRAMEWORK=${{ steps.detect.outputs.framework }}
          mkdir -p build/android
          if [ "$FRAMEWORK" = "flutter" ]; then
            flutter build apk --debug
            cp build/app/outputs/flutter-apk/app-debug.apk build/android/app-debug.apk
          elif [ "$FRAMEWORK" = "expo" ]; then
            npx expo prebuild
            cd android && ./gradlew assembleDebug
            cp app/build/outputs/apk/debug/app-debug.apk ../build/android/
          elif [ "$FRAMEWORK" = "react-native" ]; then
            cd android && ./gradlew assembleDebug
            cp app/build/outputs/apk/debug/app-debug.apk ../build/android/
          elif [ "$FRAMEWORK" = "ionic" ]; then
            ionic capacitor build android --no-open
            cd android && ./gradlew assembleDebug
            cp app/build/outputs/apk/debug/app-debug.apk ../build/android/
          elif [ "$FRAMEWORK" = "native" ]; then
            cd android && ./gradlew assembleDebug
            cp app/build/outputs/apk/debug/app-debug.apk ../build/android/
          fi

      - name: Build iOS
        if: matrix.platform == 'ios'
        run: |
          FRAMEWORK=${{ steps.detect.outputs.framework }}
          mkdir -p build/ios
          if [ "$FRAMEWORK" = "flutter" ]; then
            flutter build ios --debug --no-codesign
            cp -r build/ios/iphonesimulator build/ios/
          elif [ "$FRAMEWORK" = "expo" ]; then
            npx expo prebuild
            cd ios && xcodebuild -scheme $(ls | head -n 1 | sed 's/.xcodeproj//') -sdk iphonesimulator -configuration Debug
            cp -r build/Debug-iphonesimulator ../build/ios/
          elif [ "$FRAMEWORK" = "react-native" ]; then
            cd ios && xcodebuild -scheme $(ls | head -n 1 | sed 's/.xcodeproj//') -sdk iphonesimulator -configuration Debug
            cp -r build/Debug-iphonesimulator ../build/ios/
          elif [ "$FRAMEWORK" = "ionic" ]; then
            ionic capacitor build ios --no-open
            cd ios && xcodebuild -scheme App -sdk iphonesimulator -configuration Debug
            cp -r build/Debug-iphonesimulator ../build/ios/
          elif [ "$FRAMEWORK" = "native" ]; then
            cd ios && xcodebuild -scheme App -sdk iphonesimulator -configuration Debug
            cp -r build/Debug-iphonesimulator ../build/ios/
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: |
            build/${{ matrix.platform }}/

  publish:
    name: Create Release and upload assets
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download Android artifact
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: android-build
          path: downloaded/android

      - name: Download iOS artifact
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: ios-build
          path: downloaded/ios

      - name: Prepare release artifacts
        run: |
          mkdir -p release-assets
          if [ -d downloaded/android ]; then
            # pick first apk file
            APK=$(find downloaded/android -type f -name "*.apk" | head -n 1)
            if [ -n "$APK" ]; then
              cp "$APK" release-assets/
            fi
          fi

          if [ -d downloaded/ios ]; then
            # zip ios build folder if present
            IOS_DIR=$(find downloaded/ios -maxdepth 2 -type d -name "*iphonesimulator*" | head -n 1 || true)
            if [ -n "$IOS_DIR" ]; then
              zip -r release-assets/ios-sim.zip "$IOS_DIR"
            fi
          fi

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets
          asset_name: |
            $(basename release-assets/*.apk 2>/dev/null || true)
          asset_content_type: application/octet-stream
