import { logger } from "@/domains/shared/utils/logger";
import { secureStorage } from "@/domains/shared/utils/secureStorage";
import { Redirect } from "expo-router";
import { useEffect, useState } from "react";
import { ActivityIndicator, View } from "react-native";

/**
 * üéØ Root Index - ƒêi·ªÉm kh·ªüi ƒë·∫ßu c·ªßa app
 * 
 * Flow:
 * 1. Check xem ƒë√£ c√≥ identifier cache ch∆∞a
 * 2. N·∫øu C√ì ‚Üí redirect t·ªõi /auth/sign-in (user ƒë√£ t·ª´ng ƒëƒÉng nh·∫≠p)
 * 3. N·∫øu KH√îNG ‚Üí redirect t·ªõi /auth/username-sign-in (user m·ªõi)
 * 
 * Note: KH√îNG check auth token ·ªü ƒë√¢y, ch·ªâ check identifier
 */
export default function Index() {
  const [isChecking, setIsChecking] = useState(true);
  const [hasIdentifier, setHasIdentifier] = useState(false);

  useEffect(() => {
    checkInitialRoute();
  }, []);

  const checkInitialRoute = async () => {
    try {
      logger.info("App", "Checking initial route...");

      // Ch·ªâ check identifier, KH√îNG check token
      const identifier = await secureStorage.getIdentifier();

      if (identifier) {
        logger.info("App", "Found cached identifier, redirect to sign-in");
        setHasIdentifier(true);
      } else {
        logger.info("App", "No cached identifier, redirect to username-sign-in");
        setHasIdentifier(false);
      }
    } catch (error) {
      logger.error("App", "Error checking initial route", error);
      // N·∫øu c√≥ l·ªói, m·∫∑c ƒë·ªãnh v·ªÅ username-sign-in
      setHasIdentifier(false);
    } finally {
      setIsChecking(false);
    }
  };

  // Show loading khi ƒëang check
  if (isChecking) {
    return (
      <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
        <ActivityIndicator size="large" color="#A3142A" />
      </View>
    );
  }

  // Redirect d·ª±a tr√™n k·∫øt qu·∫£ check
  if (hasIdentifier) {
    return <Redirect href="/auth/sign-in" />;
  }

  return <Redirect href="/auth/username-sign-in" />;
}