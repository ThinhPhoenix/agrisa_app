workflows:
  # Android Workflow
  react-native-android:
    name: React Native Android (Bun)
    instance_type: mac_mini_m1
    max_build_duration: 120
    environment:
      groups:
        - expo_url
      vars:
        EXPO_PROJECT_SLUG: "agrisa"
      node: 18
    cache:
      cache_paths:
        - $CM_BUILD_DIR/node_modules
    scripts:
      - name: Install Bun và dependencies
        script: |
          curl -fsSL https://bun.sh/install | bash
          source ~/.bashrc || true
          export PATH="$HOME/.bun/bin:$PATH"
          
          which bun && bun --version
          bun install
          bun add -g @expo/cli
      
      - name: Setup Environment Variables
        script: |
          if [ -z "$EXPO_PUBLIC_API_URL" ]; then
            echo "❌ ERROR: EXPO_PUBLIC_API_URL is not set!"
            echo "Please check Codemagic environment group 'expo_url'"
            exit 1
          fi
          
          echo "✅ Environment variables loaded:"
          echo "EXPO_PUBLIC_API_URL=$EXPO_PUBLIC_API_URL"
          export EXPO_PUBLIC_API_URL=$EXPO_PUBLIC_API_URL
      
      - name: Expo Prebuild for Android
        script: |
          export PATH="$HOME/.bun/bin:$PATH"
          export EXPO_PUBLIC_API_URL=$EXPO_PUBLIC_API_URL
          
          rm -rf android
          bunx expo prebuild --platform android
          
          if grep -r "EXPO_PUBLIC_API_URL" android/; then
            echo "✅ API URL has been embedded in Android build"
          else
            echo "⚠️ Warning: API URL might not be embedded"
          fi
      
      - name: Set up debug.keystore for Android
        script: |
          rm -f ~/.android/debug.keystore
          keytool -genkeypair -alias androiddebugkey -keypass android \
            -keystore ~/.android/debug.keystore -storepass android \
            -dname 'CN=Android Debug,O=Android,C=US' -keyalg 'RSA' \
            -keysize 2048 -validity 10000
      
      - name: Build Android APK
        script: |
          cd android
          export EXPO_PUBLIC_API_URL=$EXPO_PUBLIC_API_URL
          ./gradlew assembleRelease
    
    artifacts:
      - android/app/build/outputs/**/*.apk
      - android/app/build/outputs/**/*.aab
    
    publishing:
      email:
        recipients:
          - nhancd909@gmail.com
          - hgiap46@gmail.com
        notify:
          success: true
          failure: false

  # iOS Simulator Workflow
  react-native-ios-ipa:
    name: React Native iOS IPA
    instance_type: mac_mini_m1
    max_build_duration: 120
    environment:
      groups:
        - expo_url
      vars:
        BUNDLE_ID: "com.tnhaan.agrisa"
        EXPO_PROJECT_SLUG: "agrisa"
      node: 18
      xcode: latest
      cocoapods: default
    cache:
      cache_paths:
        - $CM_BUILD_DIR/node_modules
    scripts:
      - name: Install Bun và dependencies
        script: |
          curl -fsSL https://bun.sh/install | bash
          source ~/.bashrc || true
          export PATH="$HOME/.bun/bin:$PATH"
          
          which bun && bun --version
          bun install
          bun add -g @expo/cli
      
      - name: Setup Environment Variables
        script: |
          if [ -z "$EXPO_PUBLIC_API_URL" ]; then
            echo "❌ ERROR: EXPO_PUBLIC_API_URL is not set!"
            exit 1
          fi
          
          echo "✅ EXPO_PUBLIC_API_URL=$EXPO_PUBLIC_API_URL"
          export EXPO_PUBLIC_API_URL=$EXPO_PUBLIC_API_URL
      
      - name: Expo Prebuild for iOS
        script: |
          export PATH="$HOME/.bun/bin:$PATH"
          export EXPO_PUBLIC_API_URL=$EXPO_PUBLIC_API_URL
          
          rm -rf ios
          bunx expo prebuild --platform ios
      
      - name: Install CocoaPods dependencies
        script: |
          cd ios && pod install
      
      - name: Debug - List Xcode Workspace Info
        script: |
          echo "📋 Listing Xcode workspace schemes..."
          xcodebuild -workspace ios/Agrisa.xcworkspace -list || {
            echo "⚠️ Warning: Could not list schemes"
            echo "Checking for workspace file..."
            ls -la ios/*.xcworkspace/
          }
      
      - name: Build iOS App (Generic iOS Device)
        script: |
          export EXPO_PUBLIC_API_URL=$EXPO_PUBLIC_API_URL
          
          echo "🔨 Building iOS app for Generic iOS Device..."
          xcodebuild \
            -workspace ios/Agrisa.xcworkspace \
            -scheme Agrisa \
            -configuration Release \
            -sdk iphoneos \
            -destination "generic/platform=iOS" \
            -archivePath $CM_BUILD_DIR/build/Agrisa.xcarchive \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            DEVELOPMENT_TEAM="" \
            archive
          
          echo "✅ Archive created successfully"
      
      - name: Export to IPA (Without Code Signing)
        script: |
          echo "📦 Exporting IPA without code signing..."
          
          # Tạo ExportOptions.plist cho ad-hoc distribution (no signing)
          cat > $CM_BUILD_DIR/ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>compileBitcode</key>
              <false/>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadSymbols</key>
              <false/>
              <key>teamID</key>
              <string></string>
          </dict>
          </plist>
          EOF
          
          # Export IPA
          xcodebuild \
            -exportArchive \
            -archivePath $CM_BUILD_DIR/build/Agrisa.xcarchive \
            -exportPath $CM_BUILD_DIR/build/ipa \
            -exportOptionsPlist $CM_BUILD_DIR/ExportOptions.plist \
            -allowProvisioningUpdates
          
          echo "✅ IPA exported successfully"
      
      - name: Verify and Prepare IPA for Download
        script: |
          echo "🔍 Verifying IPA file..."
          
          # Tìm file IPA
          IPA_FILE=$(find $CM_BUILD_DIR/build/ipa -name "*.ipa" | head -1)
          
          if [ -f "$IPA_FILE" ]; then
            echo "✅ Found IPA: $IPA_FILE"
            
            # Copy IPA ra thư mục dễ tìm
            mkdir -p $CM_BUILD_DIR/output
            cp "$IPA_FILE" $CM_BUILD_DIR/output/Agrisa.ipa
            
            # Show file info
            ls -lh $CM_BUILD_DIR/output/Agrisa.ipa
            echo "✅ IPA ready for download"
          else
            echo "❌ IPA file not found!"
            echo "Searching for any IPA files..."
            find $CM_BUILD_DIR/build -name "*.ipa"
            exit 1
          fi
      
      - name: Create Manifest for AltStore (Optional)
        script: |
          echo "📝 Creating manifest.plist for OTA installation..."
          
          cat > $CM_BUILD_DIR/output/manifest.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>items</key>
              <array>
                  <dict>
                      <key>assets</key>
                      <array>
                          <dict>
                              <key>kind</key>
                              <string>software-package</string>
                              <key>url</key>
                              <string>https://your-server.com/Agrisa.ipa</string>
                          </dict>
                      </array>
                      <key>metadata</key>
                      <dict>
                          <key>bundle-identifier</key>
                          <string>com.tnhaan.agrisa</string>
                          <key>bundle-version</key>
                          <string>1.0</string>
                          <key>kind</key>
                          <string>software</string>
                          <key>title</key>
                          <string>Agrisa</string>
                      </dict>
                  </dict>
              </array>
          </dict>
          </plist>
          EOF
          
          echo "✅ Manifest created (update URL before use)"
    
    artifacts:
      - output/Agrisa.ipa
      - output/manifest.plist
      - build/Agrisa.xcarchive
      - build/ipa/**/*
    
    publishing:
      email:
        recipients:
          - nhancd909@gmail.com
          - hgiap46@gmail.com
        notify:
          success: true
          failure: true