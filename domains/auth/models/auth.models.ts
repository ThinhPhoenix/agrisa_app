export type SignInPayload = {
    email?: string;
    phone?: string;
    password: string;
};


export interface SignUpPayload {
  phone: string;
  email: string;
  password: string;
  national_id: string;
  user_profile: {
    full_name: string;
    date_of_birth: string;
    gender: string;
    address: string;
  };
}


export interface AuthUser {
  id: string;
  email: string;
  phone_number: string;
  status: "pending_verification" | "verified" | "suspended";
  kyc_verified: boolean;
  phone_verified: boolean;
}

export interface AuthSession {
  device_info: string;
  expires_at: string;
  ip_address: string;
  is_active: boolean;
  session_id: string;
}

export interface SignInResponse {
    access_token: string;
    session: AuthSession;
    user: AuthUser;
}

export interface SignInApiResponse extends ApiSuccessResponse<SignInResponse> {
  data: SignInResponse;
}

/**
 * ============================================
 * AUTH STATE - Qu·∫£n l√Ω tr·∫°ng th√°i x√°c th·ª±c
 * ============================================
 */
export interface AuthState {
  // ============================================
  // üì¶ CORE DATA - D·ªØ li·ªáu x√°c th·ª±c c·ªët l√µi
  // ============================================
  
  /** Access token JWT t·ª´ backend */
  accessToken: string | null;
  
  /** Th√¥ng tin user hi·ªán t·∫°i */
  user: AuthUser | null;
  
  /** Tr·∫°ng th√°i ƒë√£ ƒëƒÉng nh·∫≠p hay ch∆∞a */
  isAuthenticated: boolean;
  
  /** Tr·∫°ng th√°i ƒëang t·∫£i d·ªØ li·ªáu */
  isLoading: boolean;

  // ============================================
  // üîê AUTH ACTIONS - C√°c h√†nh ƒë·ªông x√°c th·ª±c
  // ============================================
  
  /**
   * L∆∞u th√¥ng tin x√°c th·ª±c sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
   * - L∆∞u token v√†o SecureStore
   * - L∆∞u user data v√†o SecureStore  
   * - L∆∞u identifier (email/phone) ƒë·ªÉ hi·ªÉn th·ªã l·∫°i l·∫ßn sau
   * - C·∫≠p nh·∫≠t state
   */
  setAuth: (token: string, user: AuthUser) => Promise<void>;
  
  /**
   * Ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng
   * - L·∫•y token t·ª´ SecureStore
   * - G·ªçi API verify token
   * - C·∫≠p nh·∫≠t state d·ª±a tr√™n k·∫øt qu·∫£
   * - X·ª≠ l√Ω token expired (hi·ªÉn th·ªã alert)
   */
  checkAuth: () => Promise<void>;
  
  /**
   * ƒêƒÉng xu·∫•t user
   * - X√≥a token v√† user data t·ª´ SecureStore
   * - Reset state v·ªÅ null
   * - Redirect v·ªÅ trang sign-in
   * - GI·ªÆ NGUY√äN identifier v√† biometric settings
   */
  logout: () => Promise<void>;
  
  /**
   * L√†m m·ªõi d·ªØ li·ªáu x√°c th·ª±c t·ª´ SecureStore
   * - L·∫•y token v√† user t·ª´ SecureStore
   * - C·∫≠p nh·∫≠t state n·∫øu c√≥ data
   * - D√πng khi app kh·ªüi ƒë·ªông ho·∫∑c resume
   */
  refreshAuth: () => Promise<void>;
  
  /**
   * X√≥a to√†n b·ªô d·ªØ li·ªáu x√°c th·ª±c
   * - X√≥a token v√† user data
   * - Reset state v·ªÅ null
   * - KH√îNG x√≥a identifier v√† biometric settings
   */
  clearAuth: () => Promise<void>;

  // ============================================
  // üîê BIOMETRIC ACTIONS - X√°c th·ª±c sinh tr·∫Øc h·ªçc
  // ============================================
  
  /**
   * K√≠ch ho·∫°t ƒëƒÉng nh·∫≠p b·∫±ng biometric
   * - M√£ h√≥a v√† l∆∞u password v√†o SecureStore
   * - Enable biometric flag cho account
   * - Y√™u c·∫ßu user nh·∫≠p password ƒë·ªÉ x√°c nh·∫≠n
   * 
   * @param password - M·∫≠t kh·∫©u g·ªëc c·ªßa user (s·∫Ω ƒë∆∞·ª£c m√£ h√≥a)
   * @returns Promise<boolean> - true n·∫øu enable th√†nh c√¥ng
   */
  enableBiometric: (password: string) => Promise<boolean>;
  
  /**
   * T·∫Øt ƒëƒÉng nh·∫≠p b·∫±ng biometric
   * - X√≥a password ƒë√£ l∆∞u trong SecureStore
   * - Disable biometric flag cho account
   * - Ch·ªâ √°p d·ª•ng cho account hi·ªán t·∫°i tr√™n device hi·ªán t·∫°i
   */
  disableBiometric: () => Promise<void>;
}
