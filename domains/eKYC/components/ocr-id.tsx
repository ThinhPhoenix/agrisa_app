import { useAgrisaColors } from "@/domains/agrisa_theme/hooks/useAgrisaColor";
import { useAuthStore } from "@/domains/auth/stores/auth.store";
import {
  Box,
  Button,
  ButtonIcon,
  ButtonText,
  HStack,
  Image,
  Pressable,
  Spinner,
  Text,
  VStack,
} from "@gluestack-ui/themed";
import { CameraView, useCameraPermissions } from "expo-camera";
import { File } from "expo-file-system";
import { useRouter } from "expo-router";
import { Camera, CheckCircle2, RotateCcw, X } from "lucide-react-native";
import React, { useEffect, useRef, useState } from "react";
import { Alert, Dimensions, Platform, StyleSheet } from "react-native";
import { useEkyc } from "../hooks/use-ekyc";
import { useEkycStore } from "../stores/ekyc.store";

const { width: SCREEN_WIDTH } = Dimensions.get("window");

// K√≠ch th∆∞·ªõc khung CCCD (t·ª∑ l·ªá 16:10 gi·ªëng th·∫ª th·∫≠t - theo t·ª∑ l·ªá chu·∫©n CCCD Vi·ªát Nam)
const FRAME_WIDTH = SCREEN_WIDTH * 0.85;
const FRAME_HEIGHT = FRAME_WIDTH * (10 / 16);

type CaptureStep = "instruction" | "capturing" | "processing";

// ‚úÖ Helper function ƒë·ªÉ format file size cho d·ªÖ ƒë·ªçc
const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return "0 Bytes";

  const k = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return Math.round((bytes / Math.pow(k, i)) * 100) / 100 + " " + sizes[i];
};

// ‚úÖ Helper function ƒë·ªÉ l·∫•y th√¥ng tin file
const getFileInfo = async (uri: string) => {
  try {
    const file = new File(uri);
    const exists = file.exists;

    if (!exists) {
      return { size: 0, uri, exists: false };
    }

    const size = file.size;
    return { size, uri, exists: true };
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin file:", error);
    return { size: 0, uri, exists: false };
  }
};

export const OCRIdScreen = () => {
  const router = useRouter();
  const { colors } = useAgrisaColors();

  const { ocrIdMutation } = useEkyc();
  const { setOcrData } = useEkycStore();
  const { user } = useAuthStore();

  const cameraRef = useRef<CameraView>(null);
  const [permission, requestPermission] = useCameraPermissions();

  const [currentStep, setCurrentStep] = useState<CaptureStep>("instruction");
  const [isCapturingFront, setIsCapturingFront] = useState(true);
  const [frontPhoto, setFrontPhoto] = useState<string | null>(null);
  const [backPhoto, setBackPhoto] = useState<string | null>(null);

  // Chuy·ªÉn trang khi OCR th√†nh c√¥ng
  useEffect(() => {
    if (ocrIdMutation.isSuccess) {
      console.log("‚úÖ OCR ID th√†nh c√¥ng! Chuy·ªÉn sang face-scan");
      router.push("/settings/verify/face-scan");
    }
  }, [ocrIdMutation.isSuccess, router]);

  // Request camera permissions
  useEffect(() => {
    if (Platform.OS === "ios" || Platform.OS === "android") {
      if (!permission?.granted) {
        requestPermission();
      }
    }
  }, []);

  // Ki·ªÉm tra quy·ªÅn camera
  if (!permission) {
    return (
      <Box
        flex={1}
        bg={colors.background}
        justifyContent="center"
        alignItems="center"
        p="$6"
      >
        <Spinner size="large" color={colors.primary} />
        <Text mt="$4" color={colors.text}>
          ƒêang ki·ªÉm tra quy·ªÅn camera...
        </Text>
      </Box>
    );
  }

  if (!permission.granted) {
    return (
      <Box
        flex={1}
        bg={colors.background}
        justifyContent="center"
        alignItems="center"
        p="$6"
      >
        <Camera size={64} color={colors.textSecondary} />
        <Text
          fontSize="$lg"
          fontWeight="$bold"
          color={colors.text}
          mt="$4"
          textAlign="center"
        >
          C·∫ßn quy·ªÅn truy c·∫≠p camera
        </Text>
        <Text
          fontSize="$sm"
          color={colors.textSecondary}
          mt="$2"
          textAlign="center"
        >
          Agrisa c·∫ßn quy·ªÅn s·ª≠ d·ª•ng camera ƒë·ªÉ ch·ª•p CCCD/CMND c·ªßa b·∫°n
        </Text>
        <Button
          size="lg"
          bg={colors.primary}
          onPress={requestPermission}
          mt="$6"
        >
          <ButtonText color={colors.text}>C·∫•p quy·ªÅn</ButtonText>
        </Button>
      </Box>
    );
  }

  // ‚úÖ Ch·ª•p ·∫£nh - C√ì LOG FILE SIZE
  const takePicture = async () => {
    if (!cameraRef.current) return;

    try {
      const photo = await cameraRef.current.takePictureAsync({
        quality: 1,
        base64: false,
        skipProcessing: false,
      });

      if (!photo) return;

      // ‚úÖ L·∫•y th√¥ng tin file size
      const fileInfo = await getFileInfo(photo.uri);

      console.log("üì∏ ƒê√£ ch·ª•p ·∫£nh:", {
        uri: photo.uri,
        isFront: isCapturingFront,
        width: photo.width,
        height: photo.height,
        // ‚úÖ Log file size
        fileSizeBytes: fileInfo.size,
        fileSizeFormatted: formatFileSize(fileInfo.size),
        fileExists: fileInfo.exists,
      });

      // ‚úÖ C·∫£nh b√°o n·∫øu file qu√° l·ªõn (> 5MB)
      const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
      if (fileInfo.size > MAX_FILE_SIZE) {
        console.warn("‚ö†Ô∏è File size l·ªõn h∆°n 5MB:", formatFileSize(fileInfo.size));
        Alert.alert(
          "C·∫£nh b√°o",
          `·∫¢nh c√≥ dung l∆∞·ª£ng kh√° l·ªõn (${formatFileSize(
            fileInfo.size
          )}). Upload c√≥ th·ªÉ ch·∫≠m h∆°n.`,
          [
            { text: "Ch·ª•p l·∫°i", onPress: () => retakeCurrentPhoto() },
            { text: "Ti·∫øp t·ª•c", style: "default" },
          ]
        );
      }

      // ‚úÖ C·∫£nh b√°o n·∫øu file qu√° nh·ªè (< 100KB - c√≥ th·ªÉ b·ªã l·ªói)
      const MIN_FILE_SIZE = 100 * 1024; // 100KB
      if (fileInfo.size < MIN_FILE_SIZE && fileInfo.size > 0) {
        console.warn("‚ö†Ô∏è File size nh·ªè h∆°n 100KB:", formatFileSize(fileInfo.size));
        Alert.alert(
          "C·∫£nh b√°o",
          `·∫¢nh c√≥ dung l∆∞·ª£ng qu√° nh·ªè (${formatFileSize(
            fileInfo.size
          )}). C√≥ th·ªÉ kh√¥ng ƒë·ªß r√µ n√©t.`,
          [
            { text: "Ch·ª•p l·∫°i", onPress: () => retakeCurrentPhoto() },
            { text: "Ti·∫øp t·ª•c", style: "default" },
          ]
        );
      }

      // L∆∞u ·∫£nh v√†o state
      if (isCapturingFront) {
        setFrontPhoto(photo.uri);
        setOcrData({ cccd_front: photo.uri });
        console.log("‚úÖ ƒê√£ l∆∞u ·∫£nh m·∫∑t tr∆∞·ªõc v√†o store");
      } else {
        setBackPhoto(photo.uri);
        console.log("‚úÖ ƒê√£ l∆∞u ·∫£nh m·∫∑t sau");
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi ch·ª•p ·∫£nh:", error);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ ch·ª•p ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.", [
        { text: "ƒê√≥ng" },
      ]);
    }
  };

  // Ch·ª•p l·∫°i ·∫£nh hi·ªán t·∫°i
  const retakeCurrentPhoto = () => {
    console.log(
      `üîÑ Ch·ª•p l·∫°i ·∫£nh ${isCapturingFront ? "m·∫∑t tr∆∞·ªõc" : "m·∫∑t sau"}`
    );
    if (isCapturingFront) {
      setFrontPhoto(null);
    } else {
      setBackPhoto(null);
    }
  };

  // X√°c nh·∫≠n ·∫£nh hi·ªán t·∫°i
  const confirmCurrentPhoto = () => {
    if (isCapturingFront) {
      console.log("‚úÖ X√°c nh·∫≠n ·∫£nh m·∫∑t tr∆∞·ªõc, chuy·ªÉn sang m·∫∑t sau");
      setIsCapturingFront(false);
    } else {
      console.log("‚úÖ X√°c nh·∫≠n ·∫£nh m·∫∑t sau, b·∫Øt ƒë·∫ßu submit");
      handleSubmit();
    }
  };

  // ‚úÖ Submit FormData - C√ì LOG T·ªîNG DUNG L∆Ø·ª¢NG
  const handleSubmit = async () => {
    console.log("üöÄ B·∫Øt ƒë·∫ßu handleSubmit");

    // Validate
    if (!frontPhoto || !backPhoto) {
      console.error("‚ùå Thi·∫øu ·∫£nh CCCD");
      Alert.alert("L·ªói", "Thi·∫øu ·∫£nh CCCD. Vui l√≤ng ch·ª•p l·∫°i.", [
        { text: "ƒê√≥ng" },
      ]);
      return;
    }

    if (!user?.id) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y user_id");
      Alert.alert(
        "L·ªói",
        "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
        [{ text: "ƒê√≥ng" }]
      );
      return;
    }

    setCurrentStep("processing");

    try {
      // ‚úÖ L·∫•y file info c·ªßa c·∫£ 2 ·∫£nh
      const frontFileInfo = await getFileInfo(frontPhoto);
      const backFileInfo = await getFileInfo(backPhoto);

      const totalSize = frontFileInfo.size + backFileInfo.size;

      console.log("üì¶ Th√¥ng tin file tr∆∞·ªõc khi submit:");
      console.log("  üìÑ M·∫∑t tr∆∞·ªõc:", {
        size: formatFileSize(frontFileInfo.size),
        sizeBytes: frontFileInfo.size,
        exists: frontFileInfo.exists,
      });
      console.log("  üìÑ M·∫∑t sau:", {
        size: formatFileSize(backFileInfo.size),
        sizeBytes: backFileInfo.size,
        exists: backFileInfo.exists,
      });
      console.log("  üìä T·ªïng dung l∆∞·ª£ng:", {
        size: formatFileSize(totalSize),
        sizeBytes: totalSize,
      });

      // ‚úÖ C·∫£nh b√°o n·∫øu t·ªïng dung l∆∞·ª£ng qu√° l·ªõn
      const MAX_TOTAL_SIZE = 10 * 1024 * 1024; // 10MB
      if (totalSize > MAX_TOTAL_SIZE) {
        console.warn("‚ö†Ô∏è T·ªïng dung l∆∞·ª£ng > 10MB:", formatFileSize(totalSize));
      }

      console.log("üì¶ B·∫Øt ƒë·∫ßu t·∫°o FormData...");

      // T·∫°o FormData
      const formData = new FormData();

      formData.append("cccd_front", {
        uri: frontPhoto,
        type: "image/jpeg",
        name: `cccd_front_${Date.now()}.jpg`,
      } as any);

      console.log("‚úÖ ƒê√£ append cccd_front");

      formData.append("cccd_back", {
        uri: backPhoto,
        type: "image/jpeg",
        name: `cccd_back_${Date.now()}.jpg`,
      } as any);

      console.log("‚úÖ ƒê√£ append cccd_back");

      formData.append("user_id", user.id);

      console.log("‚úÖ ƒê√£ append user_id:", user.id);

      // Log FormData entries
      console.log("üìã FormData entries:");
      // @ts-ignore
      if (formData._parts) {
        // @ts-ignore
        formData._parts.forEach((part: any, index: number) => {
          console.log(`  Entry ${index}:`, {
            fieldName: part[0],
            value: part[1]?.name || part[1],
          });
        });
      }

      console.log("üöÄ G·ªçi mutation v·ªõi FormData...");

      // G·ªçi mutation
      await ocrIdMutation.mutateAsync(formData as any);

      console.log("‚úÖ Submit th√†nh c√¥ng!");
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i d·ªØ li·ªáu:", error);

      if (error instanceof Error) {
        console.error("Error name:", error.name);
        console.error("Error message:", error.message);
        console.error("Error stack:", error.stack);
      }

      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.", [
        {
          text: "Ch·ª•p l·∫°i",
          onPress: () => {
            console.log("üîÑ Reset v√† ch·ª•p l·∫°i t·ª´ ƒë·∫ßu");
            setFrontPhoto(null);
            setBackPhoto(null);
            setIsCapturingFront(true);
            setCurrentStep("capturing");
          },
        },
      ]);

      setCurrentStep("capturing");
    }
  };

  // B·∫Øt ƒë·∫ßu ch·ª•p
  const startCapture = () => {
    console.log("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu ch·ª•p CCCD");
    setCurrentStep("capturing");
    setIsCapturingFront(true);
    setFrontPhoto(null);
    setBackPhoto(null);
  };

  // H·ªßy v√† quay l·∫°i
  const cancelCapture = () => {
    console.log("‚ùå H·ªßy ch·ª•p CCCD");
    setCurrentStep("instruction");
    setFrontPhoto(null);
    setBackPhoto(null);
    setIsCapturingFront(true);
  };

  // Render m√†n h√¨nh h∆∞·ªõng d·∫´n
  const renderInstructionScreen = () => (
    <Box flex={1} bg={colors.background} justifyContent="center" p="$6">
      <VStack space="xl" alignItems="center">
        <Camera size={80} color={colors.primary} />

        <VStack space="md" alignItems="center">
          <Text
            fontSize="$2xl"
            fontWeight="$bold"
            color={colors.text}
            textAlign="center"
          >
            Ch·ª•p CCCD/CMND
          </Text>
          <Text fontSize="$sm" color={colors.textSecondary} textAlign="center">
            B·∫°n s·∫Ω c·∫ßn ch·ª•p c·∫£ 2 m·∫∑t c·ªßa CCCD/CMND
          </Text>
        </VStack>

        {/* H∆∞·ªõng d·∫´n chi ti·∫øt - D√†nh cho n√¥ng d√¢n */}
        <Box
          bg={colors.surface}
          p="$5"
          borderRadius="$lg"
          borderWidth={1}
          borderColor={colors.border}
          w="$full"
        >
          <VStack space="md">
            <Text fontSize="$sm" fontWeight="$semibold" color={colors.text}>
              L∆∞u √Ω khi ch·ª•p:
            </Text>
            <VStack space="sm">
              <HStack space="sm" alignItems="flex-start">
                <Text color={colors.primary}>‚Ä¢</Text>
                <Text fontSize="$xs" color={colors.textSecondary} flex={1}>
                  ƒê·∫∑t CCCD/CMND v·ª´a kh√≠t trong khung ch·ªØ nh·∫≠t
                </Text>
              </HStack>
              <HStack space="sm" alignItems="flex-start">
                <Text color={colors.primary}>‚Ä¢</Text>
                <Text fontSize="$xs" color={colors.textSecondary} flex={1}>
                  Ch·ª•p ·ªü n∆°i c√≥ √°nh s√°ng ƒë·ªß, tr√°nh ch√≥i s√°ng
                </Text>
              </HStack>
              <HStack space="sm" alignItems="flex-start">
                <Text color={colors.primary}>‚Ä¢</Text>
                <Text fontSize="$xs" color={colors.textSecondary} flex={1}>
                  ƒê·∫£m b·∫£o th√¥ng tin r√µ n√©t, kh√¥ng b·ªã m·ªù
                </Text>
              </HStack>
              <HStack space="sm" alignItems="flex-start">
                <Text color={colors.primary}>‚Ä¢</Text>
                <Text fontSize="$xs" color={colors.textSecondary} flex={1}>
                  Tr√°nh b√≥ng ƒë·ªï che khu·∫•t th√¥ng tin
                </Text>
              </HStack>
            </VStack>
          </VStack>
        </Box>

        <Button size="lg" bg={colors.primary} onPress={startCapture} w="$full">
          <ButtonText color={colors.text} fontWeight="$semibold">
            B·∫Øt ƒë·∫ßu ch·ª•p
          </ButtonText>
        </Button>
      </VStack>
    </Box>
  );

  // Render camera v·ªõi preview overlay
  const renderCameraScreen = () => {
    const label = isCapturingFront ? "M·∫∑t tr∆∞·ªõc" : "M·∫∑t sau";
    const currentPhoto = isCapturingFront ? frontPhoto : backPhoto;

    return (
      <Box flex={1}>
        <CameraView
          ref={cameraRef}
          style={StyleSheet.absoluteFillObject}
          facing="back"
        >
          <Box flex={1}>
            {/* Header */}
            <Box bg="rgba(0,0,0,0.8)" p="$4" pt="$12">
              <HStack justifyContent="space-between" alignItems="center">
                <Text fontSize="$lg" fontWeight="$bold" color={colors.text}>
                  Ch·ª•p {label} CCCD
                </Text>
                <Pressable onPress={cancelCapture}>
                  <X size={24} color={colors.text} />
                </Pressable>
              </HStack>
            </Box>

            {/* V√πng camera v·ªõi khung CCCD */}
            <Box flex={1} justifyContent="center" alignItems="center">
              <Box mb="$4" px="$6">
                <Text
                  fontSize="$sm"
                  color={colors.text}
                  textAlign="center"
                  fontWeight="$medium"
                >
                  ƒê·∫∑t {label.toLowerCase()} CCCD v·ª´a kh√≠t trong khung
                </Text>
              </Box>

              {/* Khung CCCD */}
              <Box
                width={FRAME_WIDTH}
                height={FRAME_HEIGHT}
                borderWidth={3}
                borderColor={currentPhoto ? colors.success : colors.primary}
                borderRadius="$lg"
                position="relative"
                overflow="hidden"
              >
                {currentPhoto && (
                  <Image
                    source={{ uri: currentPhoto }}
                    alt={`Preview ${label}`}
                    width={FRAME_WIDTH}
                    height={FRAME_HEIGHT}
                    position="absolute"
                    resizeMode="cover"
                  />
                )}

                {/* 4 g√≥c highlight */}
                <Box
                  position="absolute"
                  top={-2}
                  left={-2}
                  width={30}
                  height={30}
                  borderTopWidth={5}
                  borderLeftWidth={5}
                  borderColor={currentPhoto ? colors.success : colors.primary}
                  borderTopLeftRadius="$lg"
                />
                <Box
                  position="absolute"
                  top={-2}
                  right={-2}
                  width={30}
                  height={30}
                  borderTopWidth={5}
                  borderRightWidth={5}
                  borderColor={currentPhoto ? colors.success : colors.primary}
                  borderTopRightRadius="$lg"
                />
                <Box
                  position="absolute"
                  bottom={-2}
                  left={-2}
                  width={30}
                  height={30}
                  borderBottomWidth={5}
                  borderLeftWidth={5}
                  borderColor={currentPhoto ? colors.success : colors.primary}
                  borderBottomLeftRadius="$lg"
                />
                <Box
                  position="absolute"
                  bottom={-2}
                  right={-2}
                  width={30}
                  height={30}
                  borderBottomWidth={5}
                  borderRightWidth={5}
                  borderColor={currentPhoto ? colors.success : colors.primary}
                  borderBottomRightRadius="$lg"
                />
              </Box>

              <Box mt="$4" px="$6">
                <Text fontSize="$xs" color={colors.text} textAlign="center">
                  {currentPhoto
                    ? "Ki·ªÉm tra ·∫£nh c√≥ r√µ n√©t kh√¥ng?"
                    : "Gi·ªØ m√°y th·∫≥ng v√† ƒë·∫£m b·∫£o CCCD n·∫±m g·ªçn trong khung"}
                </Text>
              </Box>
            </Box>

            {/* Action buttons */}
            <Box pb="$8" px="$6" bg="rgba(0,0,0,0.8)">
              {currentPhoto ? (
                <HStack space="md">
                  <Button
                    flex={1}
                    size="lg"
                    variant="outline"
                    borderColor={colors.border}
                    onPress={retakeCurrentPhoto}
                  >
                    <ButtonIcon as={RotateCcw} color={colors.text} mr="$2" />
                    <ButtonText color={colors.text}>Ch·ª•p l·∫°i</ButtonText>
                  </Button>
                  <Button
                    flex={1}
                    size="lg"
                    bg={colors.success}
                    onPress={confirmCurrentPhoto}
                    isDisabled={ocrIdMutation.isPending}
                  >
                    {ocrIdMutation.isPending ? (
                      <Spinner color={colors.text} />
                    ) : (
                      <>
                        <ButtonIcon
                          as={CheckCircle2}
                          color={colors.text}
                          mr="$2"
                        />
                        <ButtonText color={colors.text}>
                          {isCapturingFront ? "Ti·∫øp t·ª•c" : "X√°c nh·∫≠n"}
                        </ButtonText>
                      </>
                    )}
                  </Button>
                </HStack>
              ) : (
                <VStack space="md" alignItems="center">
                  <Pressable onPress={takePicture}>
                    <Box
                      width={70}
                      height={70}
                      borderRadius="$full"
                      bg={colors.text}
                      borderWidth={5}
                      borderColor={colors.primary}
                      justifyContent="center"
                      alignItems="center"
                    >
                      <Box
                        width={50}
                        height={50}
                        borderRadius="$full"
                        bg={colors.primary}
                      />
                    </Box>
                  </Pressable>
                  <Text fontSize="$sm" color={colors.text}>
                    Ch·∫°m ƒë·ªÉ ch·ª•p
                  </Text>
                </VStack>
              )}
            </Box>
          </Box>
        </CameraView>
      </Box>
    );
  };

  // Render m√†n h√¨nh ƒëang x·ª≠ l√Ω
  const renderProcessingScreen = () => (
    <Box
      flex={1}
      bg={colors.background}
      justifyContent="center"
      alignItems="center"
      p="$6"
    >
      <Spinner size="large" color={colors.primary} />
      <Text fontSize="$lg" fontWeight="$semibold" color={colors.text} mt="$4">
        ƒêang x·ª≠ l√Ω th√¥ng tin CCCD...
      </Text>
      <Text
        fontSize="$sm"
        color={colors.textSecondary}
        mt="$2"
        textAlign="center"
      >
        H·ªá th·ªëng ƒëang ƒë·ªçc v√† x√°c th·ª±c th√¥ng tin c·ªßa b·∫°n
      </Text>
      <Text
        fontSize="$xs"
        color={colors.textSecondary}
        mt="$4"
        textAlign="center"
        px="$6"
      >
        Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i gi√¢y. Vui l√≤ng kh√¥ng t·∫Øt ·ª©ng d·ª•ng.
      </Text>
    </Box>
  );

  // Main render
  switch (currentStep) {
    case "instruction":
      return renderInstructionScreen();
    case "capturing":
      return renderCameraScreen();
    case "processing":
      return renderProcessingScreen();
    default:
      return renderInstructionScreen();
  }
};
