import * as Application from "expo-application";
import * as Crypto from "expo-crypto";
import * as SecureStore from "expo-secure-store";
import { Platform } from "react-native";

// ============================================
// üì¶ STORAGE KEYS
// ============================================
export const STORAGE_KEYS = {
  ACCESS_TOKEN: "agrisa_access_token",
  USER_DATA: "agrisa_user_data",
  SAVED_IDENTIFIER: "agrisa_saved_identifier",
  DEVICE_ID: "agrisa_device_id",
  BIOMETRIC_PREFIX: "agrisa_biometric",
} as const;

// ============================================
// üßπ HELPER: SANITIZE IDENTIFIER
// ============================================
/**
 * Sanitize identifier th√†nh format an to√†n cho SecureStore key
 * - Thay th·∫ø k√Ω t·ª± ƒë·∫∑c bi·ªát b·∫±ng underscore
 * - Ch·ªâ gi·ªØ l·∫°i: a-z, 0-9, dot, dash, underscore
 * - Lowercase ƒë·ªÉ consistent
 *
 * @example
 * - "user@email.com" ‚Üí "user_email_com"
 * - "+84987654321" ‚Üí "84987654321"
 * - "test.user-123" ‚Üí "test_user_123"
 */
const sanitizeIdentifier = (identifier: string): string => {
  return (
    identifier
      .trim()
      .toLowerCase()
      // Thay th·∫ø t·∫•t c·∫£ k√Ω t·ª± kh√¥ng h·ª£p l·ªá b·∫±ng underscore
      .replace(/[^a-z0-9._-]/g, "_")
      // Lo·∫°i b·ªè underscore li√™n ti·∫øp
      .replace(/_+/g, "_")
      // Lo·∫°i b·ªè underscore ·ªü ƒë·∫ßu/cu·ªëi
      .replace(/^_+|_+$/g, "")
  );
};

// ============================================
// üîê HELPER: VALIDATE KEY FORMAT
// ============================================
/**
 * Validate key format cho SecureStore
 * Key ph·∫£i:
 * - Kh√¥ng r·ªóng
 * - Ch·ªâ ch·ª©a: alphanumeric, dot, dash, underscore
 * - ƒê·ªô d√†i t·ª´ 1-100 k√Ω t·ª±
 */
const validateKey = (key: string): boolean => {
  if (!key || key.length === 0 || key.length > 100) {
    return false;
  }
  // Ch·ªâ cho ph√©p: a-z, A-Z, 0-9, dot, dash, underscore
  const validPattern = /^[a-zA-Z0-9._-]+$/;
  return validPattern.test(key);
};

// ============================================
// üîê HELPER: GET DEVICE ID
// ============================================
/**
 * L·∫•y Device ID duy nh·∫•t cho thi·∫øt b·ªã
 * iOS: identifierForVendor
 * Android: androidId
 */
const getDeviceId = async (): Promise<string> => {
  try {
    let deviceId = await SecureStore.getItemAsync(STORAGE_KEYS.DEVICE_ID);

    if (!deviceId) {
      if (Platform.OS === "ios") {
        deviceId = (await Application.getIosIdForVendorAsync()) || "";
      } else if (Platform.OS === "android") {
        deviceId = (await Application.getAndroidId()) || "";
      }

      // Fallback: t·∫°o random ID n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c
      if (!deviceId) {
        deviceId = `device_${Date.now()}_${Math.random().toString(36).substring(7)}`;
      }

      // Sanitize device ID tr∆∞·ªõc khi l∆∞u
      deviceId = sanitizeIdentifier(deviceId);

      await SecureStore.setItemAsync(STORAGE_KEYS.DEVICE_ID, deviceId);
      console.log(`‚úÖ [SecureStorage] Device ID generated: ${deviceId}`);
    }

    return deviceId;
  } catch (error) {
    console.error("‚ùå [SecureStorage] Error getting device ID:", error);
    // Fallback v·ªõi timestamp
    return `device_${Date.now()}_${Math.random().toString(36).substring(7)}`;
  }
};

/**
 * T·∫°o key cho biometric theo account v√† device
 * Format: agrisa_biometric_{sanitized_identifier}_{deviceId}
 *
 * ‚ö†Ô∏è QUAN TR·ªåNG: Key ph·∫£i tu√¢n th·ªß format c·ªßa SecureStore
 * Ch·ªâ ch·∫•p nh·∫≠n: alphanumeric, dot, dash, underscore
 */
const getBiometricKey = async (identifier: string): Promise<string> => {
  // ‚úÖ Validate identifier tr∆∞·ªõc khi t·∫°o key
  if (!identifier || identifier.trim().length === 0) {
    throw new Error("Identifier kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
  }

  // ‚úÖ Sanitize identifier ƒë·ªÉ lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
  const sanitizedIdentifier = sanitizeIdentifier(identifier);

  // ‚úÖ Validate l·∫°i sau khi sanitize
  if (sanitizedIdentifier.length === 0) {
    throw new Error(
      `Identifier kh√¥ng h·ª£p l·ªá sau khi sanitize: "${identifier}"`
    );
  }

  const deviceId = await getDeviceId();

  // ‚úÖ Sanitize c·∫£ deviceId ƒë·ªÉ ch·∫Øc ch·∫Øn
  const sanitizedDeviceId = sanitizeIdentifier(deviceId);

  const key = `${STORAGE_KEYS.BIOMETRIC_PREFIX}_${sanitizedIdentifier}_${sanitizedDeviceId}`;

  // ‚úÖ VALIDATE KEY CU·ªêI C√ôNG
  if (!validateKey(key)) {
    throw new Error(`Invalid SecureStore key generated: "${key}"`);
  }

  console.log(`üîë [SecureStorage] Generated biometric key: ${key}`);
  console.log(`   Original identifier: ${identifier}`);
  console.log(`   Sanitized identifier: ${sanitizedIdentifier}`);

  return key;
};

// ============================================
// üîê SECURE STORAGE SERVICE
// ============================================
export const secureStorage = {
  // ============================================
  // üë§ USER TOKEN & DATA
  // ============================================

  /**
   * L∆∞u access token
   */
  setToken: async (token: string): Promise<void> => {
    try {
      await SecureStore.setItemAsync(STORAGE_KEYS.ACCESS_TOKEN, token);
      console.log("‚úÖ [SecureStorage] Token stored");
    } catch (error) {
      console.error("‚ùå [SecureStorage] Error storing token:", error);
      throw error;
    }
  },

  /**
   * L·∫•y access token
   */
  getToken: async (): Promise<string | null> => {
    try {
      const token = await SecureStore.getItemAsync(STORAGE_KEYS.ACCESS_TOKEN);
      return token;
    } catch (error) {
      console.error("‚ùå [SecureStorage] Error getting token:", error);
      return null;
    }
  },

  /**
   * L∆∞u user data
   */
  setUser: async (user: any): Promise<void> => {
    try {
      await SecureStore.setItemAsync(
        STORAGE_KEYS.USER_DATA,
        JSON.stringify(user)
      );
      console.log("‚úÖ [SecureStorage] User data stored");
    } catch (error) {
      console.error("‚ùå [SecureStorage] Error storing user:", error);
      throw error;
    }
  },

  /**
   * L·∫•y user data
   */
  getUser: async (): Promise<any | null> => {
    try {
      const userData = await SecureStore.getItemAsync(STORAGE_KEYS.USER_DATA);
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      console.error("‚ùå [SecureStorage] Error getting user:", error);
      return null;
    }
  },

  /**
   * X√≥a token (gi·ªØ l·∫°i user data)
   */
  clearUserToken: async (): Promise<void> => {
    try {
      await SecureStore.deleteItemAsync(STORAGE_KEYS.ACCESS_TOKEN);
      console.log("‚úÖ [SecureStorage] User token cleared");
    } catch (error) {
      console.error("‚ùå [SecureStorage] Error clearing token:", error);
    }
  },

  /**
   * X√≥a t·∫•t c·∫£ auth data (token + user)
   */
  clearAuth: async (): Promise<void> => {
    try {
      await Promise.all([
        SecureStore.deleteItemAsync(STORAGE_KEYS.ACCESS_TOKEN),
        SecureStore.deleteItemAsync(STORAGE_KEYS.USER_DATA),
      ]);
      console.log("‚úÖ [SecureStorage] Auth data cleared");
    } catch (error) {
      console.error("‚ùå [SecureStorage] Error clearing auth:", error);
    }
  },

  // ============================================
  // üìß IDENTIFIER MANAGEMENT (Email/Phone)
  // ============================================

  /**
   * L∆∞u identifier (email ho·∫∑c phone) c·ªßa account ƒë√£ ƒëƒÉng nh·∫≠p
   * D√πng ƒë·ªÉ hi·ªÉn th·ªã l·∫°i khi user m·ªü app
   */
  setIdentifier: async (identifier: string): Promise<void> => {
    try {
      const normalizedIdentifier = identifier.trim();
      await SecureStore.setItemAsync(
        STORAGE_KEYS.SAVED_IDENTIFIER,
        normalizedIdentifier
      );
      console.log(
        `‚úÖ [SecureStorage] Identifier saved: ${normalizedIdentifier}`
      );
    } catch (error) {
      console.error("‚ùå [SecureStorage] Error saving identifier:", error);
      throw error;
    }
  },

  /**
   * L·∫•y identifier ƒë√£ l∆∞u
   */
  getIdentifier: async (): Promise<string | null> => {
    try {
      const identifier = await SecureStore.getItemAsync(
        STORAGE_KEYS.SAVED_IDENTIFIER
      );
      if (identifier) {
        console.log(`‚úÖ [SecureStorage] Identifier retr ieved: ${identifier}`);
      }
      return identifier;
    } catch (error) {
      console.error("‚ùå [SecureStorage] Error getting identifier:", error);
      return null;
    }
  },

  /**
   * X√≥a identifier ƒë√£ l∆∞u (khi user ƒëƒÉng xu·∫•t ho·∫∑c ƒë·ªïi t√†i kho·∫£n)
   */
  clearIdentifier: async (): Promise<void> => {
    try {
      await SecureStore.deleteItemAsync(STORAGE_KEYS.SAVED_IDENTIFIER);
      console.log("‚úÖ [SecureStorage] Identifier cleared");
    } catch (error) {
      console.error("‚ùå [SecureStorage] Error clearing identifier:", error);
    }
  },

  // ============================================
  // üîê BIOMETRIC AUTHENTICATION - SIMPLIFIED
  // ============================================

  /**
   * ‚úÖ M·ªöI: Set biometric password - SINGLE SOURCE OF TRUTH
   * Function n√†y v·ª´a l∆∞u password, v·ª´a enable biometric
   * N·∫øu mu·ªën disable ‚Üí G·ªçi clearBiometricPassword()
   */
  setBiometricPassword: async (
    identifier: string,
    password: string
  ): Promise<void> => {
    try {
      if (!identifier || identifier.trim().length === 0) {
        throw new Error("Identifier kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
      }

      if (!password || password.length === 0) {
        throw new Error("Password kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
      }

      console.log(
        `üîê [SecureStorage] Setting biometric for: ${identifier}`
      );

      const key = await getBiometricKey(identifier);

      // T·∫°o encryption
      const deviceId = await getDeviceId();
      const encryptionSeed = `${deviceId}_${identifier.trim()}_agrisa_secret`;

      const encryptionKey = await Crypto.digestStringAsync(
        Crypto.CryptoDigestAlgorithm.SHA256,
        encryptionSeed
      );

      const salt = Date.now().toString(36);
      const encryptedPassword = btoa(
        `${salt}:${password}:${encryptionKey.substring(0, 16)}`
      );

      const biometricData = {
        identifier: identifier.trim(),
        encryptedPassword,
        enabledAt: new Date().toISOString(),
        deviceId,
        salt,
        version: "1.0", // ƒê·ªÉ track version n·∫øu c·∫ßn migrate
      };

      await SecureStore.setItemAsync(key, JSON.stringify(biometricData));
      console.log(
        `‚úÖ [SecureStorage] Biometric enabled & password saved for ${identifier}`
      );
    } catch (error) {
      console.error(
        "‚ùå [SecureStorage] Error setting biometric password:",
        error
      );
      throw error;
    }
  },

  /**
   * Ki·ªÉm tra biometric c√≥ enabled kh√¥ng
   * ‚Üí Ch·ªâ c·∫ßn check data c√≥ t·ªìn t·∫°i hay kh√¥ng
   */
  isBiometricEnabled: async (identifier: string): Promise<boolean> => {
    try {
      if (!identifier || identifier.trim().length === 0) {
        return false;
      }

      const key = await getBiometricKey(identifier);

      if (!validateKey(key)) {
        console.log(`‚ö†Ô∏è [SecureStorage] Invalid key: ${key}`);
        return false;
      }

      const data = await SecureStore.getItemAsync(key);

      if (!data) {
        return false;
      }

      const biometricData = JSON.parse(data);
      const currentDeviceId = await getDeviceId();

      if (biometricData.deviceId !== currentDeviceId) {
        console.log(
          `‚ö†Ô∏è [SecureStorage] Device mismatch for ${identifier}`
        );
        return false;
      }

      console.log(
        `‚úÖ [SecureStorage] Biometric enabled for ${identifier}`
      );
      return true;
    } catch (error) {
      console.error("‚ùå [SecureStorage] Error checking biometric:", error);
      return false;
    }
  },

  /**
   * L·∫•y password ƒë√£ gi·∫£i m√£
   */
  getBiometricPassword: async (identifier: string): Promise<string | null> => {
    try {
      if (!identifier || identifier.trim().length === 0) {
        return null;
      }

      const key = await getBiometricKey(identifier);
      const data = await SecureStore.getItemAsync(key);

      if (!data) {
        console.log(
          `‚ÑπÔ∏è [SecureStorage] No biometric data for ${identifier}`
        );
        return null;
      }

      const biometricData = JSON.parse(data);
      const currentDeviceId = await getDeviceId();

      if (biometricData.deviceId !== currentDeviceId) {
        console.log(`‚ö†Ô∏è [SecureStorage] Device mismatch`);
        return null;
      }

      // Gi·∫£i m√£
      const {
        encryptedPassword,
        salt,
        identifier: originalIdentifier,
      } = biometricData;

      const deviceId = await getDeviceId();
      const encryptionSeed = `${deviceId}_${originalIdentifier}_agrisa_secret`;
      const encryptionKey = await Crypto.digestStringAsync(
        Crypto.CryptoDigestAlgorithm.SHA256,
        encryptionSeed
      );

      const decrypted = atob(encryptedPassword);
      const parts = decrypted.split(":");

      if (parts.length !== 3 || parts[0] !== salt) {
        console.error("‚ùå [SecureStorage] Invalid encrypted format");
        return null;
      }

      return parts[1];
    } catch (error) {
      console.error(
        "‚ùå [SecureStorage] Error getting password:",
        error
      );
      return null;
    }
  },

  /**
   * ‚úÖ ƒê∆†N GI·∫¢N: X√≥a biometric = X√≥a password
   */
  clearBiometricPassword: async (identifier: string): Promise<void> => {
    try {
      if (!identifier || identifier.trim().length === 0) {
        return;
      }

      const key = await getBiometricKey(identifier);

      if (!validateKey(key)) {
        console.log(`‚ö†Ô∏è [SecureStorage] Invalid key, skip delete`);
        return;
      }

      try {
        await SecureStore.deleteItemAsync(key);
        console.log(
          `‚úÖ [SecureStorage] Biometric cleared for ${identifier}`
        );
      } catch (deleteError: any) {
        if (!deleteError.message?.includes("not found")) {
          throw deleteError;
        }
        console.log(
          `‚ÑπÔ∏è [SecureStorage] Key not found (already cleared)`
        );
      }
    } catch (error) {
      console.error(
        "‚ùå [SecureStorage] Error clearing biometric:",
        error
      );
    }
  },

  /**
   * ‚úÖ ALIAS: clearBiometric = clearBiometricPassword
   */
  clearBiometric: async (identifier: string): Promise<void> => {
    return secureStorage.clearBiometricPassword(identifier);
  },

  clearAllBiometricData: async (): Promise<void> => {
    try {
      const savedIdentifier = await secureStorage.getIdentifier();

      if (savedIdentifier) {
        await secureStorage.clearBiometric(savedIdentifier);
      }

      console.log("‚úÖ [SecureStorage] All biometric data cleared");
    } catch (error) {
      console.error(
        "‚ùå [SecureStorage] Error clearing all biometric:",
        error
      );
    }
  },

  // ============================================
  // üîÑ DEVICE MANAGEMENT
  // ============================================

  /**
   * L·∫•y Device ID c·ªßa thi·∫øt b·ªã hi·ªán t·∫°i
   */
  getDeviceId: async (): Promise<string> => {
    return await getDeviceId();
  },

  /**
   * Reset Device ID (d√πng cho testing ho·∫∑c troubleshooting)
   * ‚ö†Ô∏è C·∫¢NH B√ÅO: S·∫Ω l√†m m·∫•t t·∫•t c·∫£ biometric settings
   */
  resetDeviceId: async (): Promise<void> => {
    try {
      await SecureStore.deleteItemAsync(STORAGE_KEYS.DEVICE_ID);
      console.log("‚ö†Ô∏è [SecureStorage] Device ID reset");
    } catch (error) {
      console.error("‚ùå [SecureStorage] Error resetting device ID:", error);
    }
  },

  // ============================================
  // üßπ FULL CLEANUP
  // ============================================

  /**
   * X√≥a T·∫§T C·∫¢ d·ªØ li·ªáu (logout ho√†n to√†n)
   * Bao g·ªìm: token, user, identifier, biometric
   */
  clearAll: async (): Promise<void> => {
    try {
      const savedIdentifier = await secureStorage.getIdentifier();

      await Promise.all([
        SecureStore.deleteItemAsync(STORAGE_KEYS.ACCESS_TOKEN),
        SecureStore.deleteItemAsync(STORAGE_KEYS.USER_DATA),
        SecureStore.deleteItemAsync(STORAGE_KEYS.SAVED_IDENTIFIER),
        // X√≥a biometric c·ªßa account hi·ªán t·∫°i
        savedIdentifier
          ? secureStorage.clearBiometric(savedIdentifier)
          : Promise.resolve(),
      ]);

      console.log("‚úÖ [SecureStorage] All data cleared");
    } catch (error) {
      console.error("‚ùå [SecureStorage] Error clearing all data:", error);
    }
  },
};
