import { useAgrisaColors } from "@/domains/agrisa_theme/hooks/useAgrisaColor";
import { useTest } from "@/domains/test/hooks/use-test";
import {
    Box,
    Button,
    ButtonText,
    HStack,
    Text,
    VStack,
} from "@gluestack-ui/themed";
import {
    AlertCircle,
    CheckCircle,
    Clock,
    RefreshCw,
    Wifi,
} from "lucide-react-native";
import React from "react";


export const PingScreen = () => {
  const { colors } = useAgrisaColors();
  const { data, isLoading, error, refetch } = useTest.ping();

  // Type guard helper
  const isSuccessResponse = (
    response: any
  ): response is ApiSuccessResponse<string> => {
    return response && response.success === true;
  };

  const formatTimestamp = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleString("vi-VN", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
    });
  };

  // Helper ƒë·ªÉ l·∫•y error message
  const getErrorMessage = (error: any): string => {
    if (error && typeof error === "object") {
      if ("message" in error) return error.message;
      if ("error" in error && error.error?.message) return error.error.message;
      return "C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra k·∫øt n·ªëi";
    }
    return "C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra k·∫øt n·ªëi";
  };

  return (
    <VStack flex={1} bg={colors.background} paddingVertical={50} padding={20} space="md">
      {/* Header v·ªõi icon Agrisa */}
      <HStack alignItems="center" space="sm" marginBottom={16}>
        <Wifi size={24} color={colors.primary} />
        <Text color={colors.text} fontSize="$xl" fontWeight="bold">
          Ki·ªÉm tra k·∫øt n·ªëi Agrisa
        </Text>
      </HStack>

      {/* Status indicator - Card design cho n√¥ng d√¢n */}
      <Box
        bg={colors.card}
        padding={20}
        borderRadius={16}
        borderWidth={1}
        borderColor={colors.border}
        shadowColor={colors.shadow}
        shadowOffset={{ width: 0, height: 2 }}
        shadowOpacity={0.1}
        shadowRadius={8}
        elevation={3}
      >
        {/* Ping result - Hi·ªÉn th·ªã chi ti·∫øt cho n√¥ng d√¢n */}
        {data && isSuccessResponse(data) && (
          <VStack space="sm">
            {/* Tr·∫°ng th√°i k·∫øt n·ªëi */}
            <HStack alignItems="center" space="sm">
              <CheckCircle size={20} color={colors.success} />
              <Text color={colors.success} fontSize="$lg" fontWeight="600">
                ‚úÖ K·∫øt n·ªëi th√†nh c√¥ng
              </Text>
            </HStack>

            {/* Th√¥ng tin chi ti·∫øt */}
            <Box
              bg={`${colors.success}15`}
              padding={12}
              borderRadius={8}
              borderLeftWidth={4}
              borderLeftColor={colors.success}
            >
              <VStack space="xs">
                <HStack justifyContent="space-between">
                  <Text color={colors.textSecondary} fontSize="$sm">
                    Ph·∫£n h·ªìi t·ª´ server:
                  </Text>
                  <Text color={colors.success} fontSize="$sm" fontWeight="600">
                    {data.data}
                  </Text>
                </HStack>

                <HStack justifyContent="space-between">
                  <Text color={colors.textSecondary} fontSize="$sm">
                    Tr·∫°ng th√°i:
                  </Text>
                  <Text color={colors.success} fontSize="$sm" fontWeight="600">
                    {data.success ? "Ho·∫°t ƒë·ªông t·ªët" : "C√≥ v·∫•n ƒë·ªÅ"}
                  </Text>
                </HStack>

                {data.meta?.timestamp && (
                  <HStack justifyContent="space-between" alignItems="center">
                    <HStack alignItems="center" space="xs">
                      <Clock size={14} color={colors.textSecondary} />
                      <Text color={colors.textSecondary} fontSize="$sm">
                        Th·ªùi gian ph·∫£n h·ªìi:
                      </Text>
                    </HStack>
                    <Text color={colors.text} fontSize="$sm" fontWeight="500">
                      {formatTimestamp(data.meta.timestamp)}
                    </Text>
                  </HStack>
                )}
              </VStack>
            </Box>

            {/* Th√¥ng b√°o cho n√¥ng d√¢n */}
            <Box bg={`${colors.info}10`} padding={10} borderRadius={6}>
              <Text color={colors.info} fontSize="$xs" textAlign="center">
                üåæ H·ªá th·ªëng Agrisa ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng. B·∫°n c√≥ th·ªÉ s·ª≠
                d·ª•ng ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng.
              </Text>
            </Box>
          </VStack>
        )}

        {/* Error handling - Thi·∫øt k·∫ø th√¢n thi·ªán v·ªõi n√¥ng d√¢n */}
        {error && (
          <VStack space="sm">
            <HStack alignItems="center" space="sm">
              <AlertCircle size={20} color={colors.error} />
              <Text color={colors.error} fontSize="$lg" fontWeight="600">
                ‚ùå M·∫•t k·∫øt n·ªëi
              </Text>
            </HStack>

            <Box
              bg={`${colors.error}15`}
              padding={12}
              borderRadius={8}
              borderLeftWidth={4}
              borderLeftColor={colors.error}
            >
              <Text color={colors.error} fontSize="$sm" marginBottom={8}>
                Chi ti·∫øt l·ªói: {getErrorMessage(error)}
              </Text>

              {/* H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c cho n√¥ng d√¢n */}
              <Box bg={`${colors.warning}10`} padding={8} borderRadius={6}>
                <Text
                  color={colors.warning}
                  fontSize="$xs"
                  fontWeight="600"
                  marginBottom={4}
                >
                  üí° H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:
                </Text>
                <Text color={colors.warning} fontSize="$xs">
                  ‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi WiFi ho·∫∑c 3G/4G{"\n"}‚Ä¢ Di chuy·ªÉn ƒë·∫øn n∆°i c√≥
                  s√≥ng t·ªët h∆°n{"\n"}‚Ä¢ Th·ª≠ l·∫°i sau v√†i ph√∫t{"\n"}‚Ä¢ Li√™n h·ªá h·ªó tr·ª£
                  n·∫øu v·∫´n l·ªói
                </Text>
              </Box>
            </Box>
          </VStack>
        )}

        {/* X·ª≠ l√Ω tr∆∞·ªùng h·ª£p data l√† error response */}
        {data && !isSuccessResponse(data) && (
          <VStack space="sm">
            <HStack alignItems="center" space="sm">
              <AlertCircle size={20} color={colors.error} />
              <Text color={colors.error} fontSize="$lg" fontWeight="600">
                ‚ùå L·ªói ph·∫£n h·ªìi t·ª´ server
              </Text>
            </HStack>

            <Box
              bg={`${colors.error}15`}
              padding={12}
              borderRadius={8}
              borderLeftWidth={4}
              borderLeftColor={colors.error}
            >
              <Text color={colors.error} fontSize="$sm" marginBottom={8}>
                M√£ l·ªói: {data.error?.code || "UNKNOWN"}
                {"\n"}
                Chi ti·∫øt: {data.error?.message || "Kh√¥ng c√≥ th√¥ng tin l·ªói"}
              </Text>
            </Box>
          </VStack>
        )}

        {/* Loading state */}
        {isLoading && (
          <VStack space="sm" alignItems="center">
            <HStack alignItems="center" space="sm">
              <RefreshCw size={20} color={colors.warning} />
              <Text color={colors.warning} fontSize="$lg" fontWeight="600">
                üîÑ ƒêang ki·ªÉm tra...
              </Text>
            </HStack>
            <Text
              color={colors.textSecondary}
              fontSize="$sm"
              textAlign="center"
            >
              Vui l√≤ng ch·ªù trong gi√¢y l√°t
            </Text>
          </VStack>
        )}
      </Box>

      {/* Manual ping button - Thi·∫øt k·∫ø n·ªïi b·∫≠t cho n√¥ng d√¢n */}
      <Button
        onPress={() => refetch()}
        isDisabled={isLoading}
        bg={isLoading ? colors.textMuted : colors.primary}
        borderRadius={12}
        padding={16}
        shadowColor={colors.shadow}
        shadowOffset={{ width: 0, height: 2 }}
        shadowOpacity={0.2}
        shadowRadius={4}
        elevation={2}
      >
        <HStack alignItems="center" space="sm">
          <RefreshCw
            size={18}
            color="white"
            style={{
              transform: [{ rotate: isLoading ? "360deg" : "0deg" }],
            }}
          />
          <ButtonText color="white" fontSize="$md" fontWeight="600">
            {isLoading ? "ƒêang ki·ªÉm tra..." : "Ki·ªÉm tra k·∫øt n·ªëi"}
          </ButtonText>
        </HStack>
      </Button>

      {/* Th√¥ng tin b·ªï sung cho n√¥ng d√¢n */}
      <Box
        bg={`${colors.primary}10`}
        padding={16}
        borderRadius={12}
        borderWidth={1}
        borderColor={`${colors.primary}30`}
      >
        <Text
          color={colors.primary}
          fontSize="$sm"
          fontWeight="600"
          marginBottom={8}
        >
          üì± V·ªÅ t√≠nh nƒÉng ki·ªÉm tra k·∫øt n·ªëi
        </Text>
        <Text color={colors.textSecondary} fontSize="$xs" lineHeight={16}>
          ‚Ä¢ H·ªá th·ªëng t·ª± ƒë·ªông ki·ªÉm tra m·ªói 30 gi√¢y{"\n"}‚Ä¢ Gi√∫p ƒë·∫£m b·∫£o d·ªØ li·ªáu
          n√¥ng tr·∫°i ƒë∆∞·ª£c ƒë·ªìng b·ªô{"\n"}‚Ä¢ Quan tr·ªçng cho vi·ªác b√°o c√°o thi·ªát h·∫°i
          c√¢y tr·ªìng{"\n"}‚Ä¢ K·∫øt n·ªëi t·ªët = x·ª≠ l√Ω b·ªìi th∆∞·ªùng nhanh h∆°n
        </Text>
      </Box>
    </VStack>
  );
};
export default PingScreen;